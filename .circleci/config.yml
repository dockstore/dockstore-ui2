version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.0.0
  aws-cli: circleci/aws-cli@3.1.1
  slack: circleci/slack@4.4.4
  browser-tools: circleci/browser-tools@1.2.4
executors:
  integration_test_exec: # declares a reusable executor
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>-browsers
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
        environment:
          JAVA_TOOL_OPTIONS: -Xmx2g # Java can read cgroup. Sadly the cgroup in CircleCI is wrong. Have to manually set. Using 1/2 memory as heap.
      - image: cimg/postgres:13.3
        command: postgres -c max_connections=200 -c jit=off
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
        environment:
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node

jobs:
  # Specify the webpage url (https://dev.dockstore.net or https://staging.dockstore.org or https://dockstore.org)
  # and stack (dev or staging or prod) and the no auth smoke tests will be run against the corresponding webpage.
  no_auth_smoke_tests:
    parameters:
      stack:
        type: string
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>-browsers
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
    steps:
      - setup_nightly_tests
      - run:
          name: Run remote verification test against << parameters.stack >> (no auth)
          command: bash -i -c 'npm run test-<< parameters.stack >>-no-auth'
          environment:
            MOCHA_FILE: nightly-test-results/junit/test-<< parameters.stack >>-no-auth-[hash].xml
      - run:
          name: Run remote verification of WAF against << parameters.stack >>
          command: bash -i -c 'npm run test-<< parameters.stack >>-waf'
          environment:
            MOCHA_FILE: nightly-test-results/junit/test-<< parameters.stack >>-waf-[hash].xml
      - upload_nightly_artifacts
      - slack/notify:
          channel: $<< parameters.stack >>_id
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: $<< parameters.stack >>_id
          event: pass
          template: basic_success_1

  # Specify the webpage url (https://dev.dockstore.net or https://staging.dockstore.org or https://dockstore.org)
  # and stack (dev or staging or prod) and the no auth smoke tests will be run against the corresponding webpage.
  auth_smoke_tests:
    parameters:
      stack:
        type: string
    working_directory: ~/repo
    docker:
        - image: cimg/openjdk:<< pipeline.parameters.java-tag >>-browsers
          auth:
            username: dockstoretestuser
            password: $DOCKERHUB_PASSWORD
    steps:
      - setup_nightly_tests
      - run:
          name: Run remote verification test against << parameters.stack >> (with auth)
          command: bash -i -c 'npm run test-<< parameters.stack >>-auth'
          environment:
            MOCHA_FILE: nightly-test-results/junit/test-<< parameters.stack >>-auth-[hash].xml
      - run:
          name: Reset dockstoretestuser4's resources
          # Reset user dockstoretestuser4's resources such that it has no registered tools and published workflows
          command: bash scripts/reset-dockstoretestuser4-resources.sh << parameters.stack >>
      - upload_nightly_artifacts
      - slack/notify:
          channel: $<< parameters.stack >>_id
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: $<< parameters.stack >>_id
          event: pass
          template: basic_success_1

  lint_license_unit_test_coverage:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>-browsers
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - install_browser_tools
      - checkout_merge_commit
      - install_ui_dependencies
      - save_cache:
          key: dep-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "./package-lock.json" }}
          paths:
            - ./node_modules
      - save_cache:
          key: cypress-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "./package-lock.json" }}
          paths:
            - ~/.cache
              # Disabled until ng2-ui-auth and @ngx-lite/json is replaced. Currently they do not support Angular 9
              #      - run:
              #          name: Check dependencies
              #          command: bash -i -c 'npm ls'
      - run:
          name: Lint
          command: bash -i -c 'npm run lint'
      - run:
          name: License Test
          command: |
            bash -i -c 'npm run circle-ci-license-test-file'
            bash scripts/detect-package-json-changes.sh
      - build_ui
      - run:
          name: Install codecov
          command: bash -i -c 'npm i --no-save codecov'
      - run:
          name: Unit Test
          command: bash -i -c 'npx ng test --progress=false --watch=false --code-coverage --browsers ChromeHeadless --source-map=false'
      - run:
          name: Codecov
          command: bash -i -c 'npx codecov'
      - setup_remote_docker
      - run:
          name: SonarScanner
          command: |
            export SONAR_SCANNER_VERSION=4.7.0.2747
            export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux
            curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
            unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
            export PATH=$SONAR_SCANNER_HOME/bin:$PATH
            export SONAR_SCANNER_OPTS="-server"

            if [ -n $CIRCLE_PULL_REQUEST ]
            then
              pr=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")
              base=$(curl -s $pr | jq '.base.ref')
              number=$(curl -s $pr | jq '.number')
              echo "base: ${base}, number: ${number}, pr: ${pr}"
              echo $(pwd)
              export SONAR_TOKEN="bb4869100da0a3548e91397f5a59fe32bb95254a"
              base="develop"
              number="1"

              sonar-scanner \
                -Dsonar.pullrequest.key=$number \
                -Dsonar.pullrequest.branch=SEAB-3959 \
                -Dsonar.pullrequest.base=$base
            elif [ -n $CIRCLE_BRANCH ] && [ "${CIRCLE_BRANCH}" == "develop" ]
            then
              sonar-scanner
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Reusable job to run integration tests. Specify the integration test folder name (examples: group1, group2, etc.)
  integration_test:
    parameters:
      integration_test_name:
        description: The name of the folder containing the integration tests to run
        type: string
    executor: integration_test_exec
    working_directory: ~/repo
    steps:
      - setup_integration_test
      - run:
          name: Test
          command: bash -i -c 'npx cypress run --record --config numTestsKeptInMemory=1 --reporter junit --spec cypress/e2e/<< parameters.integration_test_name >>/**/*'
          no_output_timeout: 30m
          environment:
            MOCHA_FILE: integration-tests/test-results/junit/test-results-[hash].xml
          when: always
      - upload_artifacts

  local_smoke_tests:
    executor: integration_test_exec
    working_directory: ~/repo
    steps:
      - setup_smoke_tests
      - run:
          name: Run local smoke tests (no auth)
          command: bash -i -c 'npm run test-local-no-auth'
          no_output_timeout: 30m
          environment:
            MOCHA_FILE: integration-tests/test-results/junit/test-local-no-auth-[hash].xml
          when: always
      - upload_artifacts
  upload_to_s3:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>-node
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
      - image: cimg/python:3.11
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
    parameters:
      aws_bucket:
        type: string
        default: "${AWS_BUCKET}"
    steps:
      - when:
          condition: <<parameters.aws_bucket>>
          executor: aws-cli/default
          steps:
            - aws-cli/setup:
                profile-name: WEB IDENTITY PROFILE
                role-arn: $AWS_ROLE_ARN
                role-session-name: "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}"
            - get_workspace
            # Build again for the upload to s3
            # TODO: https://gui.dockstore.org/${CIRCLE_TAG:-$CIRCLE_BRANCH}-$(echo $CIRCLE_SHA1 | cut -c -7) can probably be made into a bash/circle-ci variable.
            - run:
                name: Swap for CDN paths
                command: bash -i -c "find src \( -iname '*.html' -o -iname '*.ts' -o -iname '*.js' -o -iname '*.json' \) -exec sed -i 's~\(\.\./\)\+assets/~https://gui\.dockstore\.org/${CIRCLE_TAG:-$CIRCLE_BRANCH}-$(echo $CIRCLE_SHA1 | cut -c -7)/assets/~g' {} +"
            - run:
                name: Build
                command: NODE_OPTIONS="--max-old-space-size=1610" bash -i -c 'npm run build.prod -- --deploy-url https://gui.dockstore.org/${CIRCLE_TAG:-$CIRCLE_BRANCH}-$(echo $CIRCLE_SHA1 | cut -c -7)/'
            # Copy to a versioned folder
            - aws-s3/copy:
                from: dist
                to: 's3://${AWS_BUCKET}/${CIRCLE_TAG:-$CIRCLE_BRANCH}-$(echo $CIRCLE_SHA1 | cut -c -7)'
                arguments: |
                  --recursive \
                  --exclude index.html
            - aws-s3/copy:
                from: dist/index.html
                to: 's3://${AWS_BUCKET}/${CIRCLE_TAG-$CIRCLE_BRANCH}-$(echo $CIRCLE_SHA1 | cut -c -7)/index.html'
                arguments: |
                  --cache-control max-age=0
  check_build_develop:
    working_directory: ~/repo
    docker:
      - image: cimg/openjdk:<< pipeline.parameters.java-tag >>-node
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
      - image: cimg/python:3.11
        auth:
          username: dockstoretestuser
          password: $DOCKERHUB_PASSWORD
    steps:
      - get_workspace
      # Override the webservice version in package.json to instead build against develop webservice
      - run:
          name: set webservice to develop
          command: bash -i -c 'npm config set dockstore-ui2:webservice_version develop'
      - build_ui

parameters:
  run_nightly_auth:
    type: boolean
    default: false
  run_nightly_no_auth:
    type: boolean
    default: false
  java-tag:
    type: string
    default: "17.0.4"

workflows:
  version: 2
  everything:
    when:
      not:
        or:
          - << pipeline.parameters.run_nightly_auth >>
          - << pipeline.parameters.run_nightly_no_auth >>
    jobs:
      # Add the tags filter to all jobs so they will run before upload_to_s3
      - lint_license_unit_test_coverage:
          filters:
            tags:
              only: /.*/
          context:
            - dockerhub
      - integration_test:
          name: integration_test_1
          integration_test_name: group1
          filters:
            tags:
              only: /.*/
          requires:
            - lint_license_unit_test_coverage
          context:
            - dockerhub
      - integration_test:
          name: integration_test_2
          integration_test_name: group2
          filters:
            tags:
              only: /.*/
          requires:
            - lint_license_unit_test_coverage
          context:
            - dockerhub
      - integration_test:
          name: integration_test_3
          integration_test_name: group3
          filters:
            tags:
              only: /.*/
          requires:
            - lint_license_unit_test_coverage
          context:
            - dockerhub
      - integration_test:
          name: integration_test_4
          integration_test_name: immutableDatabaseTests
          filters:
            tags:
              only: /.*/
          requires:
            - lint_license_unit_test_coverage
          context:
            - dockerhub
      - local_smoke_tests:
          filters:
            tags:
              only: /.*/
          requires:
            - lint_license_unit_test_coverage
          context:
            - dockerhub
      # Upload builds for tags and branches to s3.
      - upload_to_s3:
          requires:
            - lint_license_unit_test_coverage
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
          context:
            - dockerhub
            - aws-ui2
      - check_build_develop:
          requires:
            - upload_to_s3
          filters:
            branches:
              only: /^develop/
          context:
            - dockerhub

  nightly_no_auth:
    when: << pipeline.parameters.run_nightly_no_auth >>
    jobs:
      - no_auth_smoke_tests:
          name: "no_auth_smoke_tests_qa"
          stack: "qa"
          context:
            - dockerhub
            - oicr-slack
      - no_auth_smoke_tests:
          name: "no_auth_smoke_tests_staging"
          stack: "staging"
          context:
            - dockerhub
            - oicr-slack
      - no_auth_smoke_tests:
          name: "no_auth_smoke_tests_prod"
          stack: "prod"
          context:
            - dockerhub
            - oicr-slack

  nightly_auth:
    when: << pipeline.parameters.run_nightly_auth >>
    jobs:
      - auth_smoke_tests:
          name: "auth_smoke_tests_qa"
          stack: "qa"
          context:
            - dockerhub
            - oicr-slack
      - auth_smoke_tests:
          name: "auth_smoke_tests_staging"
          stack: "staging"
          context:
            - dockerhub
            - oicr-slack
      - auth_smoke_tests:
          name: "auth_smoke_tests_prod"
          stack: "prod"
          context:
            - dockerhub
            - oicr-slack

commands:
  get_workspace:
    steps:
      - attach_workspace:
          at: .
  upload_artifacts:
    steps:
      - store_test_results:
          path: integration-tests/test-results
      - store_artifacts:
          path: integration-tests/test-results
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
  install_cypress_dependencies:
    steps:
      - run:
          name: Install cypress dependencies
          command: |
            sudo apt update -y
            sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb -yq
  setup_integration_test:
    parameters:
      db_dump:
        type: string
        default: "db_dump.sql"
    steps:
      - install_browser_tools
      - get_workspace
      - install_cypress_dependencies
      - run_services:
          db_dump: << parameters.db_dump >>
      - run: mkdir -p integration-tests/test-results/junit
      - restore_cypress_cache
  setup_nightly_tests:
    steps:
      - checkout
      - install_browser_tools
      - install_cypress_dependencies
      - restore_cypress_cache
      - install_ui_dependencies
      - run:
            name: Create test results directory
            command: mkdir -p nightly-test-results/junit
      - run:
          name: Prebuild
          command: bash -i -c 'npm run prebuild.prod'
  setup_smoke_tests:
    steps:
      - setup_integration_test:
          db_dump: "smoke_test_db.sql"
      - run:
          name: Index ES
          command: |
            curl -X POST "localhost:4200/api/api/ga4gh/v2/extended/tools/index" -H "accept: text/plain" -H "Authorization: Bearer fake-admin-token"
          requires:
            - setup_integration_test
  upload_nightly_artifacts:
    steps:
      - store_test_results:
          path: nightly-test-results/
      - store_artifacts:
          path: nightly-test-results/
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
  install_ui_dependencies:
    steps:
      - restore_dep_cache
      - run:
          name: Install dependencies
          #Only run 'npm ci' if node_modules was not restored from cache
          command: |
              if [ ! -d "./node_modules" ]
              then
                bash -i -c 'npm ci'
              fi
  install_browser_tools:
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
  build_ui:
    steps:
      - run:
          name: Build
          command: NODE_OPTIONS="--max-old-space-size=1610" bash -i -c 'npm run build.prod'
  run_services:
    parameters:
      db_dump:
        type: string
        default: "db_dump.sql"
    steps:
      - run:
          name: Install postgresql client
          command: sudo apt install -y postgresql-client || true
      - run:
          name: Prepare webservice
          command: bash -i -c 'DB_DUMP=<< parameters.db_dump >> npm run webservice'
          environment:
            PAGER: cat # prevent psql commands using less https://stackoverflow.com/questions/53055044/rails-rake-dbstructureload-times-out-on-circleci-2-0
      - run:
          name: Install nginx
          command: sudo apt install -y nginx || true
      - run:
          name: Prepapre nginx config
          command: sed "s%REPLACEME%`pwd`%" .circleci/nginx.conf.tmpl > .circleci/nginx.conf
      - run:
          name: Run nginx
          command: sudo nginx -c `pwd`/.circleci/nginx.conf
          background: true
      - run:
          name: Run webservice
          command: java -jar dockstore-webservice.jar server test/web.yml 1>/dev/null
          background: true
      - run:
          name: Wait for services
          command: bash scripts/wait-for.sh
  restore_cypress_cache:
    steps:
      - restore_cache:
          key: cypress-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "./package-lock.json" }}
  restore_dep_cache:
    steps:
      - restore_cache:
          key: dep-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "./package-lock.json" }}
  checkout_merge_commit:
    steps:
      - run:
          name: Checkout merge commit (PRs only)
          command: |
            if [[ -n "${CIRCLE_PULL_REQUEST}" ]]
            then
              git fetch origin +refs/pull/${CIRCLE_PULL_REQUEST##*/}/merge:
              git checkout -qf FETCH_HEAD
            fi
